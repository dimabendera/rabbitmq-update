#!/usr/bin/env bash
set -euo pipefail

########################################
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ #
########################################
: "${SRC_HOST:=oldhost}"            # –±—Ä–æ–∫–µ—Ä-–¥–∂–µ—Ä–µ–ª–æ
: "${DST_HOST:=newhost}"            # –±—Ä–æ–∫–µ—Ä-–ø—Ä–∏–π–º–∞—á
: "${SRC_HTTP_USER:=admin}"         # HTTP-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (MGMT API) –Ω–∞ SRC
: "${SRC_HTTP_PASS:=adminPass!}"    # –π–æ–≥–æ –ø–∞—Ä–æ–ª—å
: "${SHOVEL_USER:=shovel_user}"     # AMQP-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
: "${SHOVEL_PASS:=s3cr3t}"          # –π–æ–≥–æ –ø–∞—Ä–æ–ª—å
: "${SRC_MGMT_PORT:=15672}"         # MGMT-–ø–æ—Ä—Ç SRC
: "${DST_AMQP_PORT:=5672}"          # AMQP-–ø–æ—Ä—Ç DST
: "${VHOST_FILTER:=}"               # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: ¬´/¬ª, ¬´my_vhost¬ª –∞–±–æ –ø–∞—Ç–µ—Ä–Ω jq

########################################
# 1. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∞–≤                   #
########################################
echo "‚è±  –î–æ–¥–∞—é —Ç–µ–≥ policymaker –¥–ª—è $SHOVEL_USER"
rabbitmqctl set_user_tags "$SHOVEL_USER" policymaker

########################################
# 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Shovel-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤       #
########################################
created=()   # –º–∞—Å–∏–≤ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è

# –ó–∞–ø–∏—Ç —Å–ø–∏—Å–∫—É —á–µ—Ä–≥
queues_json=$(curl -s -u "$SRC_HTTP_USER:$SRC_HTTP_PASS" \
  "http://${SRC_HOST}:${SRC_MGMT_PORT}/api/queues")

# –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –ø–æ vhost
if [[ -n "$VHOST_FILTER" ]]; then
  queues_json=$(echo "$queues_json" | jq "[.[] | select(.vhost | test(\"$VHOST_FILTER\"))]")
fi

echo "üîé  –ó–Ω–∞–π–¥–µ–Ω–æ $(echo "$queues_json" | jq length) —á–µ—Ä–≥(–∏); —Å—Ç–≤–æ—Ä—é—é Shovel-–∏‚Ä¶"

echo "$queues_json" \
| jq -r '.[] | @base64' \
| while read -r row_b64; do
    _jq() { echo "$row_b64" | base64 --decode | jq -r "$1"; }
    vhost=$(_jq '.vhost')
    qname=$(_jq '.name')

    # URL-encoded vhost
    venc=$(python3 - <<PY
import urllib.parse, sys, os; print(urllib.parse.quote(sys.argv[1], safe=""))
PY
"$vhost")

    # –ù–∞–∑–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    sname="dump_${vhost//[^a-zA-Z0-9_-]/_}_${qname//[^a-zA-Z0-9_-]/_}"

    # –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É
    read -r -d '' body <<JSON
{
  "value": {
    "src-uri":  "amqp://${SHOVEL_USER}:${SHOVEL_PASS}@${SRC_HOST}/${venc}",
    "src-queue": "${qname}",
    "dest-uri": "amqp://${SHOVEL_USER}:${SHOVEL_PASS}@${DST_HOST}:${DST_AMQP_PORT}/${venc}",
    "dest-queue": "${qname}",
    "ack-mode": "on-confirm",
    "prefetch-count": 500,
    "src-delete-after": "never"          /* –≤–∞–∂–ª–∏–≤–æ: –Ω–µ —á—ñ–ø–∞—î–º–æ –≤–∏—Ö—ñ–¥–Ω—É —á–µ—Ä–≥—É */
  }
}
JSON

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    curl -s -u "$SRC_HTTP_USER:$SRC_HTTP_PASS" \
         -H 'content-type:application/json' \
         -X PUT "http://${SRC_HOST}:${SRC_MGMT_PORT}/api/parameters/shovel/${venc}/${sname}" \
         -d "$body" >/dev/null

    echo "üöÄ  Shovel '${sname}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è vhost='${vhost}', queue='${qname}'"
    created+=("${vhost}|${sname}")
done

########################################
# 3. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ                #
########################################
cleanup() {
  echo -e "\nüßπ  –í–∏–¥–∞–ª—è—é Shovel-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Å–∫—Ä–∏–ø—Ç–æ–º‚Ä¶"
  for entry in "${created[@]}"; do
    IFS='|' read -r vhost sname <<< "$entry"
    rabbitmqctl clear_parameter shovel "$vhost" "$sname" || true
    echo "‚úÖ  $vhost/$sname –æ—á–∏—â–µ–Ω–æ"
  done
}
trap cleanup EXIT

echo -e "\n‚úÖ  –£—Å—ñ Shovel-–∏ –∑–∞–ø—É—â–µ–Ω–æ.  –°–∫—Ä–∏–ø—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ, –¥–æ–ø–æ–∫–∏ –≤–∏ –π–æ–≥–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ (Ctrl-C)‚Ä¶"
# –ë–ª–æ–∫—É—î–º–æ—Å—è, —Å–ª—ñ–¥–∫—É—é—á–∏ –∑–∞ —Å—Ç–∞–Ω–æ–º Shovel-—ñ–≤
while true; do
  sleep 30
  active=$(rabbitmqctl shovel_status --formatter=json | jq '[.[] | select(.state=="running")] | length')
  echo "‚è∞  $(date '+%H:%M:%S') ‚Äì –∞–∫—Ç–∏–≤–Ω–∏—Ö Shovel-—ñ–≤: $active"
done
